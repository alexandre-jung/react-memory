{"version":3,"sources":["components/Card.js","components/Memory.js","App.js","reportWebVitals.js","index.js"],"names":["Card","state","this","props","symbol","onClick","index","className","getSymbol","React","Component","symbols","Memory","handleCardClick","console","log","cards","currentPair","matchedCardIndices","has","length","push","firstCardIndex","currentCardIndex","firstCardSymbol","currentCardSymbol","add","size","setTimeout","alert","setState","newGame","shuffleCards","Set","shuffle","indexOf","map","getCardState","renderCards","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAEqBA,E,+JAKjB,SAAUC,GACN,MAAc,WAAVA,EACO,IAEJC,KAAKC,MAAMC,S,oBAMtB,WACI,MAAgCF,KAAKC,MAA/BE,EAAN,EAAMA,QAASC,EAAf,EAAeA,MAAOL,EAAtB,EAAsBA,MACtB,OACI,qBAAKM,UAAS,eAAUN,GACpBI,QAAS,kBAAMA,EAAQC,IAD3B,SAEKJ,KAAKM,UAAUP,S,GApBEQ,IAAMC,W,OCElCC,EAAU,CACZ,eACA,eACA,eACA,eACA,eACA,gBAGiBC,E,kDAKjB,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IAeVU,gBAAkB,SAACP,GAEfQ,QAAQC,IAAI,OAAQT,EAAO,WAE3B,MAAiD,EAAKL,MAAhDe,EAAN,EAAMA,MAAOC,EAAb,EAAaA,YAAaC,EAA1B,EAA0BA,mBAG1B,GAAIA,EAAmBC,IAAIb,GACvBQ,QAAQC,IAAI,qCADhB,CAKA,OAAQE,EAAYG,QAEhB,KAAK,EACIF,EAAmBC,IAAIb,IACxBW,EAAYI,KAAKf,GACrB,MAEJ,KAAK,EAED,IAAIgB,EAAiBL,EAAY,GAC7BM,EAAmBjB,EACnBkB,EAAkBR,EAAMM,GACxBG,EAAoBT,EAAMV,GAG1BiB,IAAqBD,EAGjBE,IAAoBC,GAGpBP,EAAmBQ,IAAIpB,GACvBY,EAAmBQ,IAAIT,EAAY,IAEnCA,EAAc,GAEdH,QAAQC,IAAIG,EAAmBS,KAAM,EAAK1B,MAAMe,MAAMI,QAClDF,EAAmBS,OAAS,EAAK1B,MAAMe,MAAMI,QAC7CQ,YAAW,WACPC,MAAM,WACP,OAKPZ,EAAY,GAAKM,EACjBK,YAAW,WACP,EAAKE,SAAS,CACVb,YAAa,OAElB,MAIPH,QAAQC,IAAI,gCAOxB,EAAKe,SAAS,CACVb,cACAC,yBAjFW,EAmGnBa,QAAU,WACN,EAAKD,SAAS,CACVd,MAAO,EAAKgB,eACZd,mBAAoB,IAAIe,IACxBhB,YAAa,MArGjB,EAAKhB,MAAQ,CACTe,MAAO,EAAKgB,eACZd,mBAAoB,IAAIe,IACxBhB,YAAa,IALF,E,gDAYnB,WACI,OAAOiB,kBAAQ,GAAD,OAAKvB,EAAYA,M,0BA2EnC,SAAaL,GACT,OAA+C,IAA3CJ,KAAKD,MAAMgB,YAAYkB,QAAQ7B,GACxB,SACPJ,KAAKD,MAAMiB,mBAAmBC,IAAIb,GAC3B,UACJ,W,yBAiBX,WAAe,IAAD,OACV,OAAOJ,KAAKD,MAAMe,MAAMoB,KAAI,SAAChC,EAAQE,GACjC,OAAO,cAAC,EAAD,CAAMF,OAAQA,EACjBC,QAAS,EAAKQ,gBAEdP,MAAOA,EACPL,MAAO,EAAKoC,aAAa/B,IAFpBA,Q,oBAUjB,WACI,OACI,sBAAKC,UAAU,SAAf,UACI,wBAAQA,UAAU,MAAMF,QAASH,KAAK6B,QAAtC,6BACA,qBAAKxB,UAAU,cAAf,SACKL,KAAKoC,uB,GAtIU7B,IAAMC,WCF3B6B,MARf,WACI,OACI,qBAAKhC,UAAU,MAAf,SACI,cAAC,EAAD,CAAQA,UAAU,cCMfiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f53d5b3e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Card extends React.Component {\r\n\r\n    /**\r\n     * Get the symbol to display for this card\r\n     */\r\n    getSymbol(state) {\r\n        if (state === 'hidden') {\r\n            return '?';\r\n        }\r\n        return this.props.symbol;\r\n    }\r\n\r\n    /**\r\n     * Render this component\r\n     */\r\n    render() {\r\n        let { onClick, index, state } = this.props;\r\n        return (\r\n            <div className={`Card ${state}`}\r\n                onClick={() => onClick(index)}>\r\n                {this.getSymbol(state)}\r\n            </ div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport { shuffle } from 'lodash';\r\n\r\nconst symbols = [\r\n    '🚀',\r\n    '🚁',\r\n    '🚂',\r\n    '🚒',\r\n    '🚠',\r\n    '🚕',\r\n]\r\n\r\nexport default class Memory extends React.Component {\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cards: this.shuffleCards(),\r\n            matchedCardIndices: new Set(),\r\n            currentPair: [],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array of shuffled cards\r\n     */\r\n    shuffleCards() {\r\n        return shuffle([...symbols, ...symbols]);\r\n    }\r\n\r\n    handleCardClick = (index) => {\r\n\r\n        console.log('card', index, 'clicked');\r\n\r\n        let { cards, currentPair, matchedCardIndices } = this.state;\r\n\r\n        // Current card already picked or matched\r\n        if (matchedCardIndices.has(index)) {\r\n            console.log('This card was already matched');\r\n            return;\r\n        }\r\n\r\n        switch (currentPair.length) {\r\n\r\n            case 0:\r\n                if (!matchedCardIndices.has(index))\r\n                    currentPair.push(index);\r\n                break;\r\n\r\n            case 1:\r\n\r\n                let firstCardIndex = currentPair[0];\r\n                let currentCardIndex = index;\r\n                let firstCardSymbol = cards[firstCardIndex];\r\n                let currentCardSymbol = cards[index];\r\n\r\n                // Picked an other card than the previous picked one\r\n                if (currentCardIndex !== firstCardIndex) {\r\n\r\n                    // Pair found\r\n                    if (firstCardSymbol === currentCardSymbol) {\r\n\r\n                        // Add the 2 current cards to the match list\r\n                        matchedCardIndices.add(index);\r\n                        matchedCardIndices.add(currentPair[0]);\r\n\r\n                        currentPair = [];\r\n\r\n                        console.log(matchedCardIndices.size, this.state.cards.length);\r\n                        if (matchedCardIndices.size === this.state.cards.length) {\r\n                            setTimeout(() => {\r\n                                alert('win !');\r\n                            }, 500);\r\n                        }\r\n                    }\r\n                    // Cards don't match\r\n                    else {\r\n                        currentPair[1] = currentCardIndex;\r\n                        setTimeout(() => {\r\n                            this.setState({\r\n                                currentPair: []\r\n                            })\r\n                        }, 1000);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log('This card was already picked');\r\n                }\r\n                break;\r\n\r\n            default:\r\n        }\r\n\r\n        this.setState({\r\n            currentPair,\r\n            matchedCardIndices,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Get the state of a card by its index\r\n     */\r\n    getCardState(index) {\r\n        if (this.state.currentPair.indexOf(index) !== -1)\r\n            return 'picked';\r\n        if (this.state.matchedCardIndices.has(index))\r\n            return 'matched';\r\n        return 'hidden';\r\n    }\r\n\r\n    /**\r\n     * Start a new game\r\n     */\r\n    newGame = () => {\r\n        this.setState({\r\n            cards: this.shuffleCards(),\r\n            matchedCardIndices: new Set(),\r\n            currentPair: [],\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Display the card list\r\n     */\r\n    renderCards() {\r\n        return this.state.cards.map((symbol, index) => {\r\n            return <Card symbol={symbol}\r\n                onClick={this.handleCardClick}\r\n                key={index}\r\n                index={index}\r\n                state={this.getCardState(index)}\r\n            />\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Render this component\r\n     */\r\n    render() {\r\n        return (\r\n            <div className='Memory'>\r\n                <button className='btn' onClick={this.newGame}>Nouvelle partie</button>\r\n                <div className='Memory-list'>\r\n                    {this.renderCards()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Memory from './components/Memory';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Memory className='Memory' />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}